{"text":"<span class=\"block\" style=\"text-indent: 26.4667px; display: block;\"><font color=\"#66665e\" size=\"5\"><span style=\"background-color: rgb(255, 255, 255);\"><b>Технологии повышения производительности процессоров</b></span></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"5\"><strong style=\"hyphens: auto;\"><br></strong></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Система команд, выполняемых&nbsp;процессором,&nbsp;представляет собой нечто подобное таблице истинности логических элементов или таблице режимов работы более сложных логических микросхем. То есть она определяет логику работы процессора и его реакцию на те или иные комбинации внешних событий.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><strong style=\"hyphens: auto;\">Система команд&nbsp;-</strong>&nbsp;это набор допустимых для данного процессора управляющих кодов и способов адресации данных. Система команд жестко связана с конкретным типом процессора, поскольку определяется аппаратной структурой блока дешифрации команд, и обычно не обладает переносимостью на другие типы процессоров.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">В общем случае система команд процессора включает в себя следующие четыре основные группы команд:</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">команды пересылки данных;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">арифметические команды;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">логические команды;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">команды переходов.</font></li><li style=\"hyphens: auto;\"><font size=\"4\"><br></font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em>Команды пересылки данных</em>&nbsp;не требуют выполнения никаких операций над операндами. Операнды просто пересылаются (точнее, копируются) из источника (Source) в приемник (Destination). Источником и приемником могут быть внутренние регистры процессора, ячейки памяти или устройства ввода/вывода. АЛУ в данном случае не используется.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em><br></em></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em>Арифметические команды</em>&nbsp;выполняют операции сложения, вычитания, умножения, деления, увеличения на единицу (инкрементирования), уменьшения на единицу (декрементирования) и т.д. Этим командам требуется один или два входных операнда. Формируют команды один выходной операнд.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em><br></em></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em>Логические команды</em>&nbsp;производят над операндами логические операции, например, логическое&nbsp;И, логическое ИЛИ, исключающее ИЛИ, очистку, инверсию, разнообразные сдвиги (вправо, влево, арифметический сдвиг, циклический сдвиг). Этим командам, как и арифметическим, требуется один или два входных операнда, и формируют они один выходной операнд.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em><br></em></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em>Команды переходов</em>&nbsp;предназначены для изменения обычного порядка последовательного выполнения команд. С их помощью организуются переходы на подпрограммы и возвраты из них, всевозможные циклы, ветвления программ, пропуски фрагментов программ и т.д. Команды переходов всегда меняют содержимое счетчика команд. Переходы могут быть условными и безусловными. Именно эти команды позволяют строить сложные алгоритмы обработки информации.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">В соответствии с результатом каждой выполненной команды устанавливаются или очищаются биты регистра состояния процессора (PSW). Но надо помнить, что не все команды изменяют все имеющиеся в PSW флаги. Это определяется особенностями каждого конкретного процессора.<em>&nbsp;</em>У разных процессоров системы команд существенно различаются, но в основе своей они очень похожи. Количество команд у процессоров также различно. Например, у&nbsp;упоминавшегося&nbsp;уже процессора МС68000 всего 61 команда, а у процессора 8086 — 133 команды. У современных мощных процессоров количество команд достигает нескольких сотен. В то же время существуют процессоры с сокращенным набором команд (так называемые RISC-процессоры), в которых за счет максимального сокращения количества команд достигается увеличение эффективности и скорости их выполнения.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><i>Команды пересылки данных.</i></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Команды пересылки данных занимают очень важное место в системе команд любого процессора.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Они выполняют следующие важнейшие функции:</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">загрузка (запись) содержимого во внутренние регистры процессора;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">сохранение в памяти содержимого внутренних регистров процессора;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">копирование содержимого из одной области памяти в другую;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">запись в устройства ввода/вывода и чтение из устройств ввода/вывода.</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">В некоторых процессорах (например, Т-11) все эти функции выполняются одной единственной командой MOV (для байтовых пересылок — MOVB) но с различными методами адресации операндов.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><strong style=\"hyphens: auto;\"><br></strong></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><strong style=\"hyphens: auto;\">Регистр процессора</strong>&nbsp;— сверхбыстрая оперативная память внутри процессора, предназначенная прежде всего для хранения промежуточных результатов вычисления.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Регистр представляет собой цифровую электронную схему, служащую для временного хранения двоичных чисел. В процессоре имеется значительное количество регистров, большая часть которых используется самим процессором и недоступна программисту (например, при выборке из памяти очередной команды она помещается в регистр команд, и программист обратиться к этому регистру не может). Имеются также регистры, которые в принципе&nbsp;программно&nbsp;доступны, но обращение к ним осуществляется из программ операционной системы (например, управляющие регистры и теневые регистры дескрипторов сегментов). Этими регистрами пользуются в основном разработчики операционных систем.&nbsp;</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Доступ к значениям, хранящимся в регистрах, как правило, в несколько раз быстрее, чем доступ к ячейкам оперативной памяти (даже если&nbsp;кеш-память содержит нужные данные), но объём оперативной памяти намного превосходит суммарный объём регистров (объём среднего модуля оперативной памяти сегодня составляет 1-4&nbsp;Гб[4], суммарная «ёмкость» регистров общего назначения/данных для процессора&nbsp;Intel&nbsp;80x86 16 битов * 4 = 64 бита (8 байт)).</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">По типу&nbsp;<strong style=\"hyphens: auto;\"><em>приёма</em></strong>&nbsp;и выдачи информации различают 2 типа регистров:</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">С последовательным приёмом и выдачей информации — сдвиговые регистры.</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">С параллельным приёмом и выдачей информации — параллельные регистры.</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">По&nbsp;назначению&nbsp;регистры различаются на:</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">аккумулятор — используется для хранения промежуточных результатов арифметических и логических операций и&nbsp;</font>&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">инструкций ввода-вывода;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">флаговые&nbsp;— хранят признаки результатов арифметических и логических операций;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">общего назначения — хранят операнды арифметических и логических выражений, индексы и адреса;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">индексные — хранят индексы исходных и целевых элементов массива;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">указательные — хранят указатели на специальные области памяти (указатель текущей операции, указатель базы,&nbsp;</font><font size=\"4\">указатель стека);</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">сегментные — хранят адреса и селекторы сегментов памяти;</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><li style=\"hyphens: auto;\">&nbsp; &nbsp; &nbsp;·&nbsp;<font size=\"4\">управляющие — хранят информацию, управляющую состоянием процессора, а также адреса системных таблиц.</font></li></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><strong style=\"hyphens: auto;\"><font size=\"4\"><br></font></strong></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><strong style=\"hyphens: auto;\"><font size=\"4\">Параллелизм и конвейеризация вычислений</font></strong></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Параллелизм и конвейеризация имеют одинаковые цели — повышение производительности вычислительных систем, оба подхода предполагают достижение этой цели за счет “размножения” аппаратных средств (избыточности аппаратуры вычислительных систем), однако организация вычислительного процесса в них достаточно различается, чтобы оправдать их сравнение. Приведенная таблица отражает наиболее существенные различия между этими подходами</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Параллелизм можно&nbsp;определить&nbsp;как возможность одновременного выполнения разных и математических или служебных операций. Распараллеливание нахождение алгоритма решения задачи, использующего параллелизм и реализация этого алгоритма в ВС.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Параллельные ВС. это многопроцессорные ВС., в которых параллелизм используется для повышения производительности при решении задач за счет одновременного выполнения разных операций на разных процессорах или обрабатывающих устройствах одного процессора.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Проблемы распараллеливания:</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Некоторые задачи очень хорошо распараллеливаются (например, многие задачи обработки матриц), некоторые - очень плохо.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Решение вопросов взаимодействия параллельных процессоров (например, обмен с памятью, межпроцессорный обмен, синхронизация и др.)</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Возможность реализации выбранного распараллеленного алгоритма на данной параллельной структуре.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Конвейеризация вычислений - разбиение вычислений на последовательные этапы с целью реализации этих этапов на отдельных ступенях конвейера для повышения производительности.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Конвейер - устройство, состоящее из N последовательно соединенных частей</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">(ступеней конвейера), каждая из которых выполняет очередной шаг вычислений за время t (такт конвейера).</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Часто конвейерный режим используют в векторных ВС. Векторные ЭВМ и ВС выполняют не только скалярные операции (над числами), но и операции над векторами (массивами чисел), при этом векторные операции выполняются параллельно для всех элементов вектора, либо - на конвейере.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Выигрыш в производительности достигается за счет сокращения расходов на управление, а также за счет снижения универсальности устройства.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Основные проблемы организации вычислений в системах с перестраиваемой структурой связаны с обеспеченном параллелизма вычислений и распределенного децентрализованного управлении процессами и ресурсами. Эти проблемы разработаны только в первом приближении, и известные способы организации параллельных вычислений в распределенных системах с децентрализованным управлением еще не достигли необходимого уровня универсальности и формализации.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Параллельная обработка задач, т. е. мультипрограммный режим функционирования системы, обеспечиваемся достаточно простыми средствами. После ввода задания в систему модуль, принявший задание, посылает через коммутационное поле запрос на поиск свободного обрабатывающего модуля. Когда свободный модуль найден, ему посылается задание, определяющее имена наборов данных, в которых размещается программа, исходные данные и в которые должны быть помещены результаты вычислений. Из задания и программы модуль получает сведения о ресурсах, необходимых для выполнения задания: емкости операционной памяти, числе процессоров и неразделяемых наборах данных. Модуль закрепляет за собой необходимые ресурсы, и после обеспечения задания требуемыми ресурсами инициируется процесс выполнения задачи. По завершении обработки ресурсы освобождаются и в дальнейшем предоставляются очередным заданиям. Число процессов, реализуемых параллельно, определяется числом модулей, входящих в состав системы, и при наличии очереди заданий производительность системы пропорциональна числу модулей.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Параллельные программы строятся традиционными способами: выделением подзадач и ветвей программы, операций над векторами и матрицами и организацией конвейерной обработки данных. Наиболее просто реализуются вычисления с выделением подзадач н параллельных ветвей. При возникновении ветви в ведущей программе модуль посылает запрос на поиск свободного модуля, в который загружается программа и данные ветви, и ветвь выполняется как самостоятельная задача, по завершении которой в ведущий модуль&nbsp;отсылаются результаты обработки. Параллельные вычисления по конвейерной и матричной схемам организуются за счет создания соответствующих конфигураций связей между модулями – линейных (кольцевых) и матричных структур. Построение таких структур в многомодульных системах, в которых часть модулей занята выполнением ранее созданных задач, является пока нерешенной проблемой. Обычно для матричных вычислений в систему встраивает в качестве специального модуля матричный процессор, обеспечивающий высокопроизводительную обработку блоков данных.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><br></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">В вычислительной системе с перестраиваемой структурой должно быть реализовано распределенное (децентрализованное) управление ресурсами. Это означает, что в системе не должно быть выделенного модуля (даже многократно зарезервированного), на который возложена задача централизованною управления функционированием системы. Распределенное управление основано на согласованной работе всех модулей системы, каждый из которых реализует одинаковый набор правил управления, обеспечивающий эффективное использование всех ресурсов системы. Распределенное управление повышает надежность системы, поскольку каждый модуль способен реализовать управление ресурсами и процессами, и одновременно повышает производительность системы, так как управляющие решения формируются без затрат времени на сбор информации о состоянии всех элементов системы (а за это время ситуация в системе может существенно измениться).</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Конвейеризация вычислений - разбиение вычислений на последовательные этапы с целью реализации этих этапов на отдельных ступенях конвейера для повышения производительности.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Конвейер - устройство, состоящее из N последовательно соединенных частей (ступеней конвейера), каждая из которых выполняет очередной шаг вычислений за время t (такт конвейера). Таким образом, для решения задачи, требующей N шагов, потребуется время, равное t N, однако производительность конвейера может быть достаточно велика, поскольку освобождающиеся ступени могут заполняться новыми данными. В результате на каждом такте конвейер может выдавать очередной результат.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><strong style=\"hyphens: auto;\"><br></strong></font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><strong style=\"hyphens: auto;\">Процессоры с несколькими линиями конвейера получили название&nbsp;</strong><strong style=\"hyphens: auto;\">суперскалярных</strong>&nbsp;.&nbsp;Pentium&nbsp;— первый&nbsp;суперскалярный&nbsp;процессор&nbsp;Intel. Здесь две линии, что позволяет ему при одинаковых частотах быть вдвое производительней i80486, выполняя сразу две инструкции за такт.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Во многих вычислительных системах, наряду с конвейером команд, используются конвейеры данных. Сочетание этих двух конвейеров дает возможность достичь очень высокой производительности на определенных классах задач, особенно если используется несколько различных конвейерных процессоров, способных работать одновременно и независимо друг от друга.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><em><font size=\"4\"><br></font></em></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><em><font size=\"4\">Операции над вещественными числами (с плавающей запятой)</font></em></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\"><em>Сопроцессоры.</em>&nbsp;Для расширения вычислительных возможностей центрального процессора — выполнения арифметических операций, вычисления основных математических функции (тригонометрических, показательных, логарифмических) и т. д. — в состав ЭВМ добавляется математический сопроцессор. Применение сопроцессора повышает производительность вычислений в сотни раз. В разных поколениях процессоров он назывался по-разному — FPU (Floating&nbsp;Point&nbsp;Unit&nbsp;— блок чисел/операций с плавающей точкой — БПЗ) или NPX (Numeric&nbsp;Processor&nbsp;extension&nbsp;— числовое расширение процессора).</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Для процессоров 386 и ниже сопроцессор был отдельной микросхемой, подключаемой к локальной нише основного процессора. В любом случае сопроцессор исполняет только свои специфические команды, а всю работу по декодированию инструкций и доставке данных осуществляет ЦП.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Блоки операций с плавающей запятой. С программной точки зрения сопроцессор и процессор выглядят как единое целое. В современных (486+) процессорах БПЗ располагается на одном кристалле с центральным процессором.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><strong style=\"hyphens: auto;\"><font size=\"4\"><br></font></strong></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><strong style=\"hyphens: auto;\"><font size=\"4\">Матричные и векторные процессоры</font></strong></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Матричные и векторные процессоры предназначены для обработки изображений, матриц, массивов данных.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Матричный процессор – имеет архитектуру, рассчитанную на обработку числовых массивов. Архитектура включает в себя матрицу процессорных элементов,&nbsp;например&nbsp;64x64, работающих одновременно. Постпроцессор предназначен для реализации специальных функций,&nbsp;например&nbsp;управление базой данных.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Векторный процессор – обеспечивает параллельное выполнение операций над массивами данных, векторами. Он характеризуется специальной архитектурой, выполненной на группе параллельно работающих процессорных элементах.</font></span><span class=\"block\" style=\"display: block; color: rgb(33, 37, 41); font-family: Roboto, sans-serif;\"><font size=\"4\">Векторная обработка увеличивает производительность за счет обработки целого набора данных (вектора) одной командой, в различие скалярных, которые обрабатывают отдельные элементы этого массива. При работе в векторном режиме векторные процессоры обрабатывают данные практически параллельно, что делает их в несколько раз быстрыми, чем в скалярном режиме. Максимальная скорость передачи данных в векторном формате составляет 64 Гбайт \\ с, что почти в 2 раза больше, чем в скалярных машинах. В настоящее время созданы однокристальные векторно-конвейерные процессоры, такие, как SX-6. Основными компонентами микропроцессора являются скалярный процессор и 8 векторных, суммарная производительность которых составляет 64&nbsp;Гфлопс. Процессоры NEC, HITACHI.</font></span>"}